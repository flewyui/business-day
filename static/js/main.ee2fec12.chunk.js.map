{"version":3,"sources":["index.tsx"],"names":["App","currentYear","String","Date","getFullYear","currentMonth","getMonth","startDate","endDate","holidayObjects","holiday_jp","useState","numbersOfDays","setNumbersOfDays","allHolidays","setAllHolidays","holidaysOfMonth","setHolidaysOfMonth","businessDaysLength","setBusinessDaysLength","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","workingHoursPerDay","setworkingHoursPerDay","getBusinessdays","ym","targetYear","Number","slice","targetMonthStr","replace","targetMonth","newBusinessdaysArr","newHolidaysArr","i","formatedDate","date","year","month","day","getDate","dayOfWeekStr","getDay","formatDate","isWeekend","match","checkIsWeekend","isHoliday","forEach","holiday","checkIsHoliday","push","name","length","useEffect","lastDate","week","week_en","name_en","formatedHolidayObj","makeHolidaysArr","className","sx","minWidth","color","width","marginTop","onClick","prevMonth","prevYear","moveToPrevMonth","size","id","labelId","value","label","onChange","e","target","nextMonth","nextYear","moveToNextMonth","type","InputLabelProps","shrink","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAaMA,EAAiB,WAYnB,IAAMC,EAAcC,QAAO,IAAIC,MAAOC,eAChCC,EAAeH,QAAO,IAAIC,MAAOG,WAAa,GAC9CC,EAAY,IAAIJ,KAAK,cACrBK,EAAU,IAAIL,KAAK,cACnBM,EAAiBC,UAAmBH,EAAWC,GACrD,EAA0CG,mBAAmB,IAA7D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,mBAA+B,IAArE,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8CJ,mBAAmB,IAAjE,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAoDN,mBAAiB,IAArE,mBAAOO,EAAP,KAA2BC,EAA3B,KACA,EAAwCR,mBAAiBV,GAAzD,mBAAOmB,EAAP,KAAqBC,EAArB,KACA,EAA0CV,mBAAiBN,GAA3D,mBAAOiB,EAAP,KAAsBC,EAAtB,KACA,EAAoDZ,mBAAiB,OAArE,mBAAOa,EAAP,KAA2BC,EAA3B,KAsEMC,EAAkB,SAACC,GACrB,IAAMC,EAAaC,OAAOF,EAAGG,MAAM,EAAG,IAClCC,EAAiBJ,EAAGG,MAAM,EAAG,GAEE,MAA/BC,EAAeD,MAAM,EAAG,KACxBC,EAAiBA,EAAeC,QAAQ,IAAK,KAIjD,IAHA,IAAMC,EAAcJ,OAAOE,GACrBG,EAA+B,GAC/BC,EAA2B,GARG,WAS3BC,GACL,IACIC,EA1EO,SAACC,GAChB,IAAMC,EAAOD,EAAKlC,cACZoC,EAAQF,EAAKhC,WAAa,EAC1BmC,EAAMH,EAAKI,UAEXC,EAAe,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAD9CL,EAAKM,UAKvB,MADkB,UAAML,EAAN,YAAcC,EAAd,YAAuBC,EAAvB,YAA8BE,EAA9B,IAErB,CAgE0BE,CADA,IAAI1C,KAAKyB,EAAYK,EAAc,EAAGG,IAEnDU,EA7CS,SAACR,GACpB,IAAIQ,GAAY,EAEhB,OADIR,EAAKS,MAAM,QAAUT,EAAKS,MAAM,UAAQD,GAAY,GACjDA,CACV,CAyCyBE,CAAeX,GAC3BY,EA3DS,SAACX,GACpB,IAAIW,GAAY,EAIhB,OAHAnC,EAAYoC,SAAQ,SAACC,GACbA,EAAQb,OAASA,IAAMW,GAAY,EAC1C,IACMA,CACV,CAqDyBG,CAAef,GAE7BY,GACAnC,EAAYoC,SAAQ,SAACC,GACbA,EAAQb,OAASD,IACjBA,EAAeA,EAAaP,MAAM,GAClCK,EAAekB,KAAf,UAAuBhB,EAAvB,iBAAuCc,EAAQG,OAEtD,IAGAR,GAAcG,GAAWf,EAAmBmB,KAAKhB,EAxBtB,EAS3BD,EAAI,EAAGA,GAAKxB,EAAcqB,EAAc,GAAIG,IAAM,EAAlDA,GAiBTnB,EAAmBkB,GACnBhB,EAAsBjB,OAAOgC,EAAmBqB,QACnD,EA+CD,OAfAC,qBAAU,WACN,IADa,IAAD,WACHpB,GACL,IAAMqB,EAAW,IAAItD,KAAK0B,OAAOT,GAAegB,EAAG,GAAGM,UACtD7B,GAAiB,SAACD,GAAD,4BAAuBA,GAAvB,CAAsC6C,GAAtC,GAHT,EACHrB,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,IApFW,SAAC3B,GACrBA,EAAeyC,SAAQ,SAACC,GACpB,IAAMZ,EAAOY,EAAQb,KAAKlC,cACpBoC,EAAQW,EAAQb,KAAKhC,WAAa,EAClCmC,EAAMU,EAAQb,KAAKI,UACnBgB,EAAOP,EAAQQ,QAAQ7B,MAAM,EAAG,GAChCwB,EAAOH,EAAQS,QAEfC,EAAyC,CAC3CvB,KAFqB,UAAMC,EAAN,YAAcC,EAAd,YAAuBC,EAAvB,YAA8BiB,EAA9B,KAGrBJ,KAAMA,GAEVvC,GAAe,SAACD,GAAD,4BACRA,GADQ,CAEX+C,GAFW,GAIlB,GACJ,CAuEGC,CAAgBrD,EACnB,GAAE,IAKH+C,qBAAU,WACN9B,EAAgB,GAAD,OAAIN,GAAJ,OAAmBE,GACrC,GAAE,CAACV,EAAeQ,EAAcE,IAG7B,mCACI,sBAAKyC,UAAU,UAAf,UACI,oBAAIA,UAAU,8BAAd,0BACA,eAAC,IAAD,CAAKC,GAAI,CAAEC,SAAU,KAArB,UACI,cAAC,IAAD,CACIC,MAAM,UACNF,GAAI,CAAEG,MAAO,GAAIC,UAAW,GAC5BC,QAAS,kBAlDL,WACpB,IAAMC,EAAYzC,OAAOP,GAAiB,EAE1C,GAAkB,IAAdgD,EAAiB,CACjB,IAAMC,EAAW1C,OAAOT,GAAgB,EACxCG,EAAiB,MACjBF,EAAgBnB,OAAOqE,GAC1B,MACGhD,EAAiBrB,OAAOoE,GAE/B,CAwCkCE,EAAN,IAEb,eAAC,IAAD,CAAaR,GAAI,CAAEC,SAAU,KAAOQ,KAAK,QAAzC,UACI,cAAC,IAAD,CAAYC,GAAG,oBAAf,kBACA,eAAC,IAAD,CACIC,QAAQ,oBACRD,GAAG,oBACHE,MAAOxD,EACPyD,MAAM,OACNC,SAAU,SAACC,GACP1D,EAAgB0D,EAAEC,OAAOJ,MAC5B,EAPL,UASI,cAAC,IAAD,CAAUA,MAAM,OAAhB,kBACA,cAAC,IAAD,CAAUA,MAAM,OAAhB,kBACA,cAAC,IAAD,CAAUA,MAAM,OAAhB,kBACA,cAAC,IAAD,CAAUA,MAAM,OAAhB,kBACA,cAAC,IAAD,CAAUA,MAAM,OAAhB,wBAGR,eAAC,IAAD,CAAaZ,GAAI,CAAEC,SAAU,KAAOQ,KAAK,QAAzC,UACI,cAAC,IAAD,CAAYC,GAAG,oBAAf,mBACA,eAAC,IAAD,CACIC,QAAQ,oBACRD,GAAG,oBACHE,MAAOtD,EACPuD,MAAM,QACNC,SAAU,SAACC,GACPxD,EAAiBwD,EAAEC,OAAOJ,MAC7B,EAPL,UASI,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,IAAhB,eACA,cAAC,IAAD,CAAUA,MAAM,KAAhB,gBACA,cAAC,IAAD,CAAUA,MAAM,KAAhB,gBACA,cAAC,IAAD,CAAUA,MAAM,KAAhB,sBAGR,cAAC,IAAD,CACIV,MAAM,UACNF,GAAI,CAAEG,MAAO,GAAIC,UAAW,GAC5BC,QAAS,kBAnFL,WACpB,IAAMY,EAAYpD,OAAOP,GAAiB,EAE1C,GAAkB,KAAd2D,EAAkB,CAClB,IAAMC,EAAWrD,OAAOT,GAAgB,EACxCG,EAAiB,KACjBF,EAAgBnB,OAAOgF,GAC1B,MACG3D,EAAiBrB,OAAO+E,GAE/B,CAyEkCE,EAAN,OAGjB,sBAAKpB,UAAU,iBAAf,UACI,oBAAIA,UAAU,WAAd,8BACA,qBAAIA,UAAU,uBAAd,UACKlC,OAAOX,GACJW,OAAOL,GAAqB,IAFpC,UAMJ,sBAAKuC,UAAU,iBAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,qBAAIA,UAAU,8BAAd,UACI,cAAC,IAAD,CACIC,GAAI,CAAEG,MAAO,IAAKC,UAAW,GAC7BM,GAAG,kBACHG,MAAM,OACNO,KAAK,SACLX,KAAK,QACLG,MAAO1D,EACPmE,gBAAiB,CACbC,QAAQ,GAEZR,SAAU,SAACC,GACP5D,EAAsB4D,EAAEC,OAAOJ,MAClC,IACF,IAdP,OAeM,IACF,cAAC,IAAD,CACIZ,GAAI,CAAEG,MAAO,IAAKC,UAAW,GAC7BM,GAAG,kBACHG,MAAM,QACNO,KAAK,SACLX,KAAK,QACLG,MAAOpD,EACP6D,gBAAiB,CACbC,QAAQ,GAEZR,SAAU,SAACC,GACPtD,EAAsBsD,EAAEC,OAAOJ,MAClC,UAIZ5D,EAAgBuC,OACbvC,EAAgBuE,KAAI,SAACpC,EAASqC,GAC1B,OACI,sBAAKzB,UAAU,iBAAf,UACI,qBAAIA,UAAU,UAAd,UACa,IAARyB,GAAa,cAAe,OAEjC,oBAAIzB,UAAU,uBAAd,SACKZ,MAL4BqC,EAS5C,IAED,sBAAKzB,UAAU,iBAAf,UACI,oBAAIA,UAAU,WAAd,yBACA,oBAAIA,UAAU,uBAAd,kCAMvB,EAED0B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC3F,EAAD,MAEJ4F,SAASC,eAAe,Q","file":"static/js/main.ee2fec12.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as holiday_jp from '@holiday-jp/holiday_jp';\nimport Box from '@mui/material/Box';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport './style.css';\n\nconst App: React.VFC = () => {\n    type HolidayObj = {\n        date: Date;\n        name: string;\n        name_en: string;\n        week: string;\n        week_en: string;\n    };\n    type FormatedHolidayObj = {\n        date: string;\n        name: string;\n    };\n    const currentYear = String(new Date().getFullYear()); // 現在の年\n    const currentMonth = String(new Date().getMonth() + 1); // 現在の月\n    const startDate = new Date('2021-01-01'); // 検索可能初日\n    const endDate = new Date('2023-12-31'); // 検索可能最終日\n    const holidayObjects = holiday_jp.between(startDate, endDate); // 対象期間の休日オブジェクト\n    const [numbersOfDays, setNumbersOfDays] = useState<number[]>([]); // 対象年の各月の日数\n    const [allHolidays, setAllHolidays] = useState<FormatedHolidayObj[]>([]); // 対象年の祝日のリスト\n    const [holidaysOfMonth, setHolidaysOfMonth] = useState<string[]>([]); // 対象月の祝日のリスト\n    const [businessDaysLength, setBusinessDaysLength] = useState<string>(''); // 対象月の営業日数\n    const [selectedYear, setSelectedYear] = useState<string>(currentYear); // 選択された年\n    const [selectedMonth, setSelectedMonth] = useState<string>(currentMonth); // 選択された月\n    const [workingHoursPerDay, setworkingHoursPerDay] = useState<string>('7.5'); // 1日の稼働時間\n\n    /**\n     * 「年/月/日(曜日)」にフォーマット\n     * @param {Date} date\n     * @returns {string} formatedDate フォーマットされた日付\n     */\n    const formatDate = (date: Date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const dayOfWeek = date.getDay();\n        const dayOfWeekStr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][\n            dayOfWeek\n        ];\n        const formatedDate = `${year}/${month}/${day}(${dayOfWeekStr})`;\n        return formatedDate;\n    };\n\n    /**\n     * 対象日が休日かどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isHoliday 休日かどうかの真偽値\n     */\n    const checkIsHoliday = (date: string): boolean => {\n        let isHoliday = false;\n        allHolidays.forEach((holiday) => {\n            if (holiday.date === date) isHoliday = true;\n        });\n        return isHoliday;\n    };\n\n    /**\n     * 対象日が土日のどちらかかどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isWeekend 土日のどちらかどうかの真偽値\n     */\n    const checkIsWeekend = (date: string): boolean => {\n        let isWeekend = false;\n        if (date.match(/Sat/) || date.match(/Sun/)) isWeekend = true;\n        return isWeekend;\n    };\n\n    /**\n     * 「年/月/日/(曜日)：休日名」にフォーマットしてallHolidays:[]にセット\n     * @param holidayObjects\n     */\n    const makeHolidaysArr = (holidayObjects: HolidayObj[]) => {\n        holidayObjects.forEach((holiday) => {\n            const year = holiday.date.getFullYear();\n            const month = holiday.date.getMonth() + 1;\n            const day = holiday.date.getDate();\n            const week = holiday.week_en.slice(0, 3);\n            const name = holiday.name_en;\n            const formatedHolidayDate = `${year}/${month}/${day}(${week})`;\n            const formatedHolidayObj: FormatedHolidayObj = {\n                date: formatedHolidayDate,\n                name: name,\n            };\n            setAllHolidays((allHolidays) => [\n                ...allHolidays,\n                formatedHolidayObj,\n            ]);\n        });\n    };\n\n    /**\n     * 対象月の営業日を取得\n     * @param {string} ym\n     */\n    const getBusinessdays = (ym: string) => {\n        const targetYear = Number(ym.slice(0, 4));\n        let targetMonthStr = ym.slice(4, 6);\n        // 月の十の位に\"0\"があれば削除\n        if (targetMonthStr.slice(0, 1) === '0')\n            targetMonthStr = targetMonthStr.replace('0', '');\n        const targetMonth = Number(targetMonthStr);\n        const newBusinessdaysArr: string[] = [];\n        const newHolidaysArr: string[] = [];\n        for (let i = 1; i <= numbersOfDays[targetMonth - 1]; i++) {\n            const date: Date = new Date(targetYear, targetMonth - 1, i);\n            let formatedDate = formatDate(date);\n            const isWeekend = checkIsWeekend(formatedDate);\n            const isHoliday = checkIsHoliday(formatedDate);\n            // 休日はnewHolidaysArr:[]に追加し、ループ終了後setState()\n            if (isHoliday) {\n                allHolidays.forEach((holiday) => {\n                    if (holiday.date === formatedDate) {\n                        formatedDate = formatedDate.slice(5);\n                        newHolidaysArr.push(`${formatedDate}：${holiday.name}`);\n                    }\n                });\n            }\n            // 平日はnewBusinessdaysArr:[]に追加し、ループ終了後setState()\n            if (!isWeekend && !isHoliday) newBusinessdaysArr.push(formatedDate);\n        }\n        setHolidaysOfMonth(newHolidaysArr);\n        setBusinessDaysLength(String(newBusinessdaysArr.length));\n    };\n\n    /**\n     * 前月を表示\n     */\n    const moveToPrevMonth = () => {\n        const prevMonth = Number(selectedMonth) - 1;\n        // 年を跨ぐ場合\n        if (prevMonth === 0) {\n            const prevYear = Number(selectedYear) - 1;\n            setSelectedMonth('12');\n            setSelectedYear(String(prevYear));\n        } else {\n            setSelectedMonth(String(prevMonth));\n        }\n    };\n\n    /**\n     * 次月を表示\n     */\n    const moveToNextMonth = () => {\n        const nextMonth = Number(selectedMonth) + 1;\n        // 年を跨ぐ場合\n        if (nextMonth === 13) {\n            const nextYear = Number(selectedYear) + 1;\n            setSelectedMonth('1');\n            setSelectedYear(String(nextYear));\n        } else {\n            setSelectedMonth(String(nextMonth));\n        }\n    };\n\n    useEffect(() => {\n        for (let i = 1; i < 13; i++) {\n            const lastDate = new Date(Number(selectedYear), i, 0).getDate();\n            setNumbersOfDays((numbersOfDays) => [...numbersOfDays, lastDate]);\n        }\n        makeHolidaysArr(holidayObjects);\n    }, []);\n\n    /**\n     * 各月の日数が取得できたら実行\n     */\n    useEffect(() => {\n        getBusinessdays(`${selectedYear}${selectedMonth}`);\n    }, [numbersOfDays, selectedYear, selectedMonth]);\n\n    return (\n        <>\n            <div className='wrapper'>\n                <h5 className='item-270 lnh-80 text-center'>Business day</h5>\n                <Box sx={{ minWidth: 300 }}>\n                    <ArrowBackIosNewIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToPrevMonth()}\n                    />\n                    <FormControl sx={{ minWidth: 150 }} size='small'>\n                        <InputLabel id='demo-select-small'>Year</InputLabel>\n                        <Select\n                            labelId='demo-select-small'\n                            id='demo-select-small'\n                            value={selectedYear}\n                            label='Year'\n                            onChange={(e) => {\n                                setSelectedYear(e.target.value);\n                            }}\n                        >\n                            <MenuItem value='2021'>2021</MenuItem>\n                            <MenuItem value='2022'>2022</MenuItem>\n                            <MenuItem value='2023'>2023</MenuItem>\n                            <MenuItem value='2024'>2024</MenuItem>\n                            <MenuItem value='2025'>2025</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ minWidth: 150 }} size='small'>\n                        <InputLabel id='demo-select-small'>Month</InputLabel>\n                        <Select\n                            labelId='demo-select-small'\n                            id='demo-select-small'\n                            value={selectedMonth}\n                            label='Month'\n                            onChange={(e) => {\n                                setSelectedMonth(e.target.value);\n                            }}\n                        >\n                            <MenuItem value='1'>1</MenuItem>\n                            <MenuItem value='2'>2</MenuItem>\n                            <MenuItem value='3'>3</MenuItem>\n                            <MenuItem value='4'>4</MenuItem>\n                            <MenuItem value='5'>5</MenuItem>\n                            <MenuItem value='6'>6</MenuItem>\n                            <MenuItem value='7'>7</MenuItem>\n                            <MenuItem value='8'>8</MenuItem>\n                            <MenuItem value='9'>9</MenuItem>\n                            <MenuItem value='10'>10</MenuItem>\n                            <MenuItem value='11'>11</MenuItem>\n                            <MenuItem value='12'>12</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <ArrowForwardIosIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToNextMonth()}\n                    />\n                </Box>\n                <div className='container h-80'>\n                    <h5 className='item-130'>Working hours : </h5>\n                    <h5 className='item-270 text-center'>\n                        {Number(businessDaysLength) *\n                            Number(workingHoursPerDay)}{' '}\n                        h\n                    </h5>\n                </div>\n                <div className='container h-80'>\n                    <h5 className='item-130 lnh-80'>Settings : </h5>\n                    <h5 className='item-270 lnh-80 text-center'>\n                        <TextField\n                            sx={{ width: 100, marginTop: 3 }}\n                            id='outlined-number'\n                            label='days'\n                            type='number'\n                            size='small'\n                            value={businessDaysLength}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={(e) => {\n                                setBusinessDaysLength(e.target.value);\n                            }}\n                        />{' '}\n                        ×{' '}\n                        <TextField\n                            sx={{ width: 100, marginTop: 3 }}\n                            id='outlined-number'\n                            label='hours'\n                            type='number'\n                            size='small'\n                            value={workingHoursPerDay}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={(e) => {\n                                setworkingHoursPerDay(e.target.value);\n                            }}\n                        />\n                    </h5>\n                </div>\n                {holidaysOfMonth.length ? (\n                    holidaysOfMonth.map((holiday, key) => {\n                        return (\n                            <div className='container h-30' key={key}>\n                                <h5 className='item-95'>\n                                    {key === 0 && 'Holidays : '}{' '}\n                                </h5>\n                                <h5 className='item-305 text-center'>\n                                    {holiday}\n                                </h5>\n                            </div>\n                        );\n                    })\n                ) : (\n                    <div className='container h-30'>\n                        <h5 className='item-130'>Holidays : </h5>\n                        <h5 className='item-270 text-center'>No holiday...</h5>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}