{"version":3,"sources":["components/Holidays.tsx","components/Months.tsx","components/Settings.tsx","components/Years.tsx","index.tsx"],"names":["Holidays","holidaysOfMonth","length","map","holiday","key","className","Months","selectedMonth","setSelectedMonth","months","i","push","FormControl","sx","minWidth","size","InputLabel","id","Select","labelId","value","label","onChange","e","target","month","MenuItem","Settings","businessDaysLength","setBusinessDaysLength","workingHoursPerDay","setworkingHoursPerDay","TextField","width","marginTop","type","InputLabelProps","shrink","Years","selectedYear","setSelectedYear","from","to","items","year","App","currentYear","String","Date","getFullYear","currentMonth","getMonth","startDate","endDate","holidayObjects","holiday_jp","useState","numbersOfDays","setNumbersOfDays","allHolidays","setAllHolidays","setHolidaysOfMonth","getBusinessdays","ym","targetYear","Number","slice","targetMonthStr","replace","targetMonth","newBusinessdaysArr","newHolidaysArr","formatedDate","date","day","getDate","dayOfWeekStr","getDay","formatDate","isWeekend","match","checkIsWeekend","isHoliday","forEach","checkIsHoliday","name","useEffect","lastDate","week","week_en","name_en","formatedHolidayObj","makeHolidaysArr","Box","color","onClick","prevMonth","prevYear","moveToPrevMonth","nextMonth","nextYear","moveToNextMonth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.813a78e1.chunk.js","sourcesContent":["type Props = {\n    holidaysOfMonth: string[];\n};\n\nexport const Holidays: React.FC<Props> = ({ holidaysOfMonth }) => {\n    return (\n        <>\n            {holidaysOfMonth.length ? (\n                holidaysOfMonth.map((holiday, key) => {\n                    return (\n                        <div className='container h-30' key={key}>\n                            <h5 className='item-95'>\n                                {key === 0 && 'Holidays : '}{' '}\n                            </h5>\n                            <h5 className='item-305 text-center'>{holiday}</h5>\n                        </div>\n                    );\n                })\n            ) : (\n                <div className='container h-30'>\n                    <h5 className='item-130'>Holidays : </h5>\n                    <h5 className='item-270 text-center'>No holiday...</h5>\n                </div>\n            )}\n        </>\n    );\n};\n","import FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\ntype Props = {\n    selectedMonth: string;\n    setSelectedMonth: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const Months: React.FC<Props> = ({\n    selectedMonth,\n    setSelectedMonth,\n}) => {\n    const months = [];\n    for (let i = 1; i < 13; i++) {\n        months.push(i);\n    }\n    return (\n        <FormControl sx={{ minWidth: 150 }} size='small'>\n            <InputLabel id='demo-select-small'>Month</InputLabel>\n            <Select\n                labelId='demo-select-small'\n                id='demo-select-small'\n                value={selectedMonth}\n                label='Month'\n                onChange={(e) => {\n                    setSelectedMonth(e.target.value);\n                }}\n            >\n                {months.map((month) => {\n                    return (\n                        <MenuItem value={month} key={month}>\n                            {month}\n                        </MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n};\n","import { TextField } from '@mui/material';\n\ntype Props = {\n    businessDaysLength: string;\n    workingHoursPerDay: string;\n    setBusinessDaysLength: (value: React.SetStateAction<string>) => void;\n    setworkingHoursPerDay: (value: React.SetStateAction<string>) => void;\n};\n\nexport const Settings: React.FC<Props> = ({\n    businessDaysLength,\n    setBusinessDaysLength,\n    workingHoursPerDay,\n    setworkingHoursPerDay,\n}) => {\n    return (\n        <div className='container h-80'>\n            <h5 className='item-130 lnh-80'>Settings : </h5>\n            <h5 className='item-270 lnh-80 text-center'>\n                <TextField\n                    sx={{ width: 100, marginTop: 3 }}\n                    id='setting-days'\n                    label='days'\n                    type='number'\n                    size='small'\n                    value={businessDaysLength}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    onChange={(e) => {\n                        setBusinessDaysLength(e.target.value);\n                    }}\n                />{' '}\n                ×{' '}\n                <TextField\n                    sx={{ width: 100, marginTop: 3 }}\n                    id='setting-hours'\n                    label='hours'\n                    type='number'\n                    size='small'\n                    value={workingHoursPerDay}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    onChange={(e) => {\n                        setworkingHoursPerDay(e.target.value);\n                    }}\n                />\n            </h5>\n        </div>\n    );\n};\n","import FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\ntype Props = {\n    selectedYear: string;\n    setSelectedYear: React.Dispatch<React.SetStateAction<string>>;\n    from: number;\n    to: number;\n};\n\nexport const Years: React.FC<Props> = ({\n    selectedYear,\n    setSelectedYear,\n    from,\n    to,\n}) => {\n    const items = [];\n    for (let year = from; year < to; year++) {\n        items.push(\n            <MenuItem value={year} key={year}>\n                {year}\n            </MenuItem>\n        );\n    }\n    return (\n        <FormControl sx={{ minWidth: 150 }} size='small'>\n            <InputLabel id='demo-select-small'>Year</InputLabel>\n            <Select\n                labelId='demo-select-small'\n                id='demo-select-small'\n                value={selectedYear}\n                label='Year'\n                onChange={(e) => {\n                    setSelectedYear(e.target.value);\n                }}\n            >\n                {items}\n            </Select>\n        </FormControl>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as holiday_jp from '@holiday-jp/holiday_jp';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport Box from '@mui/material/Box';\nimport { Holidays } from './components/Holidays';\nimport { Months } from './components/Months';\nimport { Settings } from './components/Settings';\nimport { Years } from './components/Years';\nimport './style.css';\nimport { HolidayObj, FormatedHolidayObj } from './types';\n\nconst App: React.VFC = () => {\n    const currentYear = String(new Date().getFullYear()); // 現在の年\n    const currentMonth = String(new Date().getMonth() + 1); // 現在の月\n    const startDate = new Date('2024-01-01'); // 検索可能初日\n    const endDate = new Date('2029-12-31'); // 検索可能最終日\n    const holidayObjects = holiday_jp.between(startDate, endDate); // 対象期間の休日オブジェクト\n    const [numbersOfDays, setNumbersOfDays] = useState<number[]>([]); // 対象年の各月の日数\n    const [allHolidays, setAllHolidays] = useState<FormatedHolidayObj[]>([]); // 対象年の祝日のリスト\n    const [holidaysOfMonth, setHolidaysOfMonth] = useState<string[]>([]); // 対象月の祝日のリスト\n    const [businessDaysLength, setBusinessDaysLength] = useState<string>(''); // 対象月の営業日数\n    const [selectedYear, setSelectedYear] = useState<string>(currentYear); // 選択された年\n    const [selectedMonth, setSelectedMonth] = useState<string>(currentMonth); // 選択された月\n    const [workingHoursPerDay, setworkingHoursPerDay] = useState<string>('8'); // 1日の稼働時間\n\n    /**\n     * 「年/月/日(曜日)」にフォーマット\n     * @param {Date} date\n     * @returns {string} formatedDate フォーマットされた日付\n     */\n    const formatDate = (date: Date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const dayOfWeek = date.getDay();\n        const dayOfWeekStr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][\n            dayOfWeek\n        ];\n        const formatedDate = `${year}/${month}/${day}(${dayOfWeekStr})`;\n        return formatedDate;\n    };\n\n    /**\n     * 対象日が休日かどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isHoliday 休日かどうかの真偽値\n     */\n    const checkIsHoliday = (date: string): boolean => {\n        let isHoliday = false;\n        allHolidays.forEach((holiday) => {\n            if (holiday.date === date) isHoliday = true;\n        });\n        return isHoliday;\n    };\n\n    /**\n     * 対象日が土日のどちらかかどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isWeekend 土日のどちらかどうかの真偽値\n     */\n    const checkIsWeekend = (date: string): boolean => {\n        let isWeekend = false;\n        if (date.match(/Sat/) || date.match(/Sun/)) isWeekend = true;\n        return isWeekend;\n    };\n\n    /**\n     * 「年/月/日/(曜日)：休日名」にフォーマットしてallHolidays:[]にセット\n     * @param holidayObjects\n     */\n    const makeHolidaysArr = (holidayObjects: HolidayObj[]) => {\n        holidayObjects.forEach((holiday) => {\n            const year = holiday.date.getFullYear();\n            const month = holiday.date.getMonth() + 1;\n            const day = holiday.date.getDate();\n            const week = holiday.week_en.slice(0, 3);\n            const name = holiday.name_en;\n            const formatedHolidayDate = `${year}/${month}/${day}(${week})`;\n            const formatedHolidayObj: FormatedHolidayObj = {\n                date: formatedHolidayDate,\n                name: name,\n            };\n            setAllHolidays((allHolidays) => [\n                ...allHolidays,\n                formatedHolidayObj,\n            ]);\n        });\n    };\n\n    /**\n     * 対象月の営業日を取得\n     * @param {string} ym\n     */\n    const getBusinessdays = (ym: string) => {\n        const targetYear = Number(ym.slice(0, 4));\n        let targetMonthStr = ym.slice(4, 6);\n        // 月の十の位に\"0\"があれば削除\n        if (targetMonthStr.slice(0, 1) === '0')\n            targetMonthStr = targetMonthStr.replace('0', '');\n        const targetMonth = Number(targetMonthStr);\n        const newBusinessdaysArr: string[] = [];\n        const newHolidaysArr: string[] = [];\n        for (let i = 1; i <= numbersOfDays[targetMonth - 1]; i++) {\n            const date: Date = new Date(targetYear, targetMonth - 1, i);\n            let formatedDate = formatDate(date);\n            const isWeekend = checkIsWeekend(formatedDate);\n            const isHoliday = checkIsHoliday(formatedDate);\n            // 休日はnewHolidaysArr:[]に追加し、ループ終了後setState()\n            if (isHoliday) {\n                allHolidays.forEach((holiday) => {\n                    if (holiday.date === formatedDate) {\n                        formatedDate = formatedDate.slice(5);\n                        newHolidaysArr.push(`${formatedDate}：${holiday.name}`);\n                    }\n                });\n            }\n            // 平日はnewBusinessdaysArr:[]に追加し、ループ終了後setState()\n            if (!isWeekend && !isHoliday) newBusinessdaysArr.push(formatedDate);\n        }\n        setHolidaysOfMonth(newHolidaysArr);\n        setBusinessDaysLength(String(newBusinessdaysArr.length));\n    };\n\n    /**\n     * 前月を表示\n     */\n    const moveToPrevMonth = () => {\n        const prevMonth = Number(selectedMonth) - 1;\n        // 年を跨ぐ場合\n        if (prevMonth === 0) {\n            const prevYear = Number(selectedYear) - 1;\n            setSelectedMonth('12');\n            setSelectedYear(String(prevYear));\n        } else {\n            setSelectedMonth(String(prevMonth));\n        }\n    };\n\n    /**\n     * 次月を表示\n     */\n    const moveToNextMonth = () => {\n        const nextMonth = Number(selectedMonth) + 1;\n        // 年を跨ぐ場合\n        if (nextMonth === 13) {\n            const nextYear = Number(selectedYear) + 1;\n            setSelectedMonth('1');\n            setSelectedYear(String(nextYear));\n        } else {\n            setSelectedMonth(String(nextMonth));\n        }\n    };\n\n    useEffect(() => {\n        for (let i = 1; i < 13; i++) {\n            const lastDate = new Date(Number(selectedYear), i, 0).getDate();\n            setNumbersOfDays((numbersOfDays) => [...numbersOfDays, lastDate]);\n        }\n        makeHolidaysArr(holidayObjects);\n    }, []);\n\n    /**\n     * 各月の日数が取得できたら実行\n     */\n    useEffect(() => {\n        getBusinessdays(`${selectedYear}${selectedMonth}`);\n    }, [numbersOfDays, selectedYear, selectedMonth]);\n\n    return (\n        <>\n            <div className='wrapper'>\n                <h5 className='item-270 lnh-80 text-center'>Business day</h5>\n                <Box sx={{ minWidth: 300 }}>\n                    <ArrowBackIosNewIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToPrevMonth()}\n                    />\n                    <Years\n                        selectedYear={selectedYear}\n                        setSelectedYear={setSelectedYear}\n                        from={2024}\n                        to={2030}\n                    />\n                    <Months\n                        selectedMonth={selectedMonth}\n                        setSelectedMonth={setSelectedMonth}\n                    />\n                    <ArrowForwardIosIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToNextMonth()}\n                    />\n                </Box>\n                <div className='container h-80'>\n                    <h5 className='item-130'>Working hours : </h5>\n                    <h5 className='item-270 text-center'>\n                        {Number(businessDaysLength) *\n                            Number(workingHoursPerDay)}{' '}\n                        h\n                    </h5>\n                </div>\n                <Settings\n                    businessDaysLength={businessDaysLength}\n                    workingHoursPerDay={workingHoursPerDay}\n                    setBusinessDaysLength={setBusinessDaysLength}\n                    setworkingHoursPerDay={setworkingHoursPerDay}\n                />\n                <Holidays holidaysOfMonth={holidaysOfMonth} />\n            </div>\n        </>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}