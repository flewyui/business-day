{"version":3,"sources":["components/Years.tsx","components/Settings.tsx","components/Months.tsx","components/Holidays.tsx","index.tsx"],"names":["Years","selectedYear","setSelectedYear","from","to","items","year","push","MenuItem","value","FormControl","sx","minWidth","size","InputLabel","id","Select","labelId","label","onChange","e","target","Settings","businessDaysLength","setBusinessDaysLength","workingHoursPerDay","setworkingHoursPerDay","className","TextField","width","marginTop","type","InputLabelProps","shrink","Months","selectedMonth","setSelectedMonth","Holidays","holidaysOfMonth","length","map","holiday","key","App","currentYear","String","Date","getFullYear","currentMonth","getMonth","startDate","endDate","holidayObjects","holiday_jp","useState","numbersOfDays","setNumbersOfDays","allHolidays","setAllHolidays","setHolidaysOfMonth","getBusinessdays","ym","targetYear","Number","slice","targetMonthStr","replace","targetMonth","newBusinessdaysArr","newHolidaysArr","i","formatedDate","date","month","day","getDate","dayOfWeekStr","getDay","formatDate","isWeekend","match","checkIsWeekend","isHoliday","forEach","checkIsHoliday","name","useEffect","lastDate","week","week_en","name_en","formatedHolidayObj","makeHolidaysArr","Box","color","onClick","prevMonth","prevYear","moveToPrevMonth","nextMonth","nextYear","moveToNextMonth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAYaA,EAAyB,SAAC,GAOnC,IAFG,IAJHC,EAIE,EAJFA,aACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,KACAC,EACE,EADFA,GAEMC,EAAQ,GACLC,EAAOH,EAAMG,EAAOF,EAAIE,IAC7BD,EAAME,KACF,cAACC,EAAA,EAAD,CAAUC,MAAOH,EAAjB,SACKA,GADuBA,IAKpC,OACI,mCACI,eAACI,EAAA,EAAD,CAAaC,GAAI,CAAEC,SAAU,KAAOC,KAAK,QAAzC,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,oBAAf,kBACA,cAACC,EAAA,EAAD,CACIC,QAAQ,oBACRF,GAAG,oBACHN,MAAOR,EACPiB,MAAM,OACNC,SAAU,SAACC,GACPlB,EAAgBkB,EAAEC,OAAOZ,MAC5B,EAPL,SASKJ,QAKpB,E,SCnCYiB,EAA4B,SAAC,GAKnC,IAJHC,EAIE,EAJFA,mBACAC,EAGE,EAHFA,sBACAC,EAEE,EAFFA,mBACAC,EACE,EADFA,sBAEA,OACI,sBAAKC,UAAU,iBAAf,UACI,oBAAIA,UAAU,kBAAd,yBACA,qBAAIA,UAAU,8BAAd,UACI,cAACC,EAAA,EAAD,CACIjB,GAAI,CAAEkB,MAAO,IAAKC,UAAW,GAC7Bf,GAAG,eACHG,MAAM,OACNa,KAAK,SACLlB,KAAK,QACLJ,MAAOc,EACPS,gBAAiB,CACbC,QAAQ,GAEZd,SAAU,SAACC,GACPI,EAAsBJ,EAAEC,OAAOZ,MAClC,IACF,IAdP,OAeM,IACF,cAACmB,EAAA,EAAD,CACIjB,GAAI,CAAEkB,MAAO,IAAKC,UAAW,GAC7Bf,GAAG,gBACHG,MAAM,QACNa,KAAK,SACLlB,KAAK,QACLJ,MAAOgB,EACPO,gBAAiB,CACbC,QAAQ,GAEZd,SAAU,SAACC,GACPM,EAAsBN,EAAEC,OAAOZ,MAClC,SAKpB,ECzCYyB,G,OAA0B,SAAC,GAGjC,IAFHC,EAEE,EAFFA,cACAC,EACE,EADFA,iBAEA,OACI,mCACI,eAAC1B,EAAA,EAAD,CAAaC,GAAI,CAAEC,SAAU,KAAOC,KAAK,QAAzC,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,oBAAf,mBACA,eAACC,EAAA,EAAD,CACIC,QAAQ,oBACRF,GAAG,oBACHN,MAAO0B,EACPjB,MAAM,QACNC,SAAU,SAACC,GACPgB,EAAiBhB,EAAEC,OAAOZ,MAC7B,EAPL,UASI,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,IAAhB,eACA,cAACD,EAAA,EAAD,CAAUC,MAAM,KAAhB,gBACA,cAACD,EAAA,EAAD,CAAUC,MAAM,KAAhB,gBACA,cAACD,EAAA,EAAD,CAAUC,MAAM,KAAhB,uBAKnB,GCvCY4B,EAA4B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACxC,OACI,mCACKA,EAAgBC,OACbD,EAAgBE,KAAI,SAACC,EAASC,GAC1B,OACI,sBAAKf,UAAU,iBAAf,UACI,qBAAIA,UAAU,UAAd,UACa,IAARe,GAAa,cAAe,OAEjC,oBAAIf,UAAU,uBAAd,SAAsCc,MAJLC,EAO5C,IAED,sBAAKf,UAAU,iBAAf,UACI,oBAAIA,UAAU,WAAd,yBACA,oBAAIA,UAAU,uBAAd,+BAKnB,ECbKgB,EAAiB,WACnB,IAAMC,EAAcC,QAAO,IAAIC,MAAOC,eAChCC,EAAeH,QAAO,IAAIC,MAAOG,WAAa,GAC9CC,EAAY,IAAIJ,KAAK,cACrBK,EAAU,IAAIL,KAAK,cACnBM,EAAiBC,UAAmBH,EAAWC,GACrD,EAA0CG,mBAAmB,IAA7D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,mBAA+B,IAArE,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8CJ,mBAAmB,IAAjE,mBAAOhB,EAAP,KAAwBqB,EAAxB,KACA,EAAoDL,mBAAiB,IAArE,mBAAO/B,EAAP,KAA2BC,EAA3B,KACA,EAAwC8B,mBAAiBV,GAAzD,mBAAO3C,EAAP,KAAqBC,EAArB,KACA,EAA0CoD,mBAAiBN,GAA3D,mBAAOb,EAAP,KAAsBC,EAAtB,KACA,EAAoDkB,mBAAiB,KAArE,mBAAO7B,EAAP,KAA2BC,EAA3B,KAsEMkC,EAAkB,SAACC,GACrB,IAAMC,EAAaC,OAAOF,EAAGG,MAAM,EAAG,IAClCC,EAAiBJ,EAAGG,MAAM,EAAG,GAEE,MAA/BC,EAAeD,MAAM,EAAG,KACxBC,EAAiBA,EAAeC,QAAQ,IAAK,KAIjD,IAHA,IAAMC,EAAcJ,OAAOE,GACrBG,EAA+B,GAC/BC,EAA2B,GARG,WAS3BC,GACL,IACIC,EA1EO,SAACC,GAChB,IAAMlE,EAAOkE,EAAKzB,cACZ0B,EAAQD,EAAKvB,WAAa,EAC1ByB,EAAMF,EAAKG,UAEXC,EAAe,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAD9CJ,EAAKK,UAKvB,MADkB,UAAMvE,EAAN,YAAcmE,EAAd,YAAuBC,EAAvB,YAA8BE,EAA9B,IAErB,CAgE0BE,CADA,IAAIhC,KAAKgB,EAAYK,EAAc,EAAGG,IAEnDS,EA7CS,SAACP,GACpB,IAAIO,GAAY,EAEhB,OADIP,EAAKQ,MAAM,QAAUR,EAAKQ,MAAM,UAAQD,GAAY,GACjDA,CACV,CAyCyBE,CAAeV,GAC3BW,EA3DS,SAACV,GACpB,IAAIU,GAAY,EAIhB,OAHAzB,EAAY0B,SAAQ,SAAC1C,GACbA,EAAQ+B,OAASA,IAAMU,GAAY,EAC1C,IACMA,CACV,CAqDyBE,CAAeb,GAE7BW,GACAzB,EAAY0B,SAAQ,SAAC1C,GACbA,EAAQ+B,OAASD,IACjBA,EAAeA,EAAaP,MAAM,GAClCK,EAAe9D,KAAf,UAAuBgE,EAAvB,iBAAuC9B,EAAQ4C,OAEtD,IAGAN,GAAcG,GAAWd,EAAmB7D,KAAKgE,EAxBtB,EAS3BD,EAAI,EAAGA,GAAKf,EAAcY,EAAc,GAAIG,IAAM,EAAlDA,GAiBTX,EAAmBU,GACnB7C,EAAsBqB,OAAOuB,EAAmB7B,QACnD,EA+CD,OAfA+C,qBAAU,WACN,IADa,IAAD,WACHhB,GACL,IAAMiB,EAAW,IAAIzC,KAAKiB,OAAO9D,GAAeqE,EAAG,GAAGK,UACtDnB,GAAiB,SAACD,GAAD,4BAAuBA,GAAvB,CAAsCgC,GAAtC,GAHT,EACHjB,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,IApFW,SAAClB,GACrBA,EAAe+B,SAAQ,SAAC1C,GACpB,IAAMnC,EAAOmC,EAAQ+B,KAAKzB,cACpB0B,EAAQhC,EAAQ+B,KAAKvB,WAAa,EAClCyB,EAAMjC,EAAQ+B,KAAKG,UACnBa,EAAO/C,EAAQgD,QAAQzB,MAAM,EAAG,GAChCqB,EAAO5C,EAAQiD,QAEfC,EAAyC,CAC3CnB,KAFqB,UAAMlE,EAAN,YAAcmE,EAAd,YAAuBC,EAAvB,YAA8Bc,EAA9B,KAGrBH,KAAMA,GAEV3B,GAAe,SAACD,GAAD,4BACRA,GADQ,CAEXkC,GAFW,GAIlB,GACJ,CAuEGC,CAAgBxC,EACnB,GAAE,IAKHkC,qBAAU,WACN1B,EAAgB,GAAD,OAAI3D,GAAJ,OAAmBkC,GACrC,GAAE,CAACoB,EAAetD,EAAckC,IAG7B,mCACI,sBAAKR,UAAU,UAAf,UACI,oBAAIA,UAAU,8BAAd,0BACA,eAACkE,EAAA,EAAD,CAAKlF,GAAI,CAAEC,SAAU,KAArB,UACI,cAAC,IAAD,CACIkF,MAAM,UACNnF,GAAI,CAAEkB,MAAO,GAAIC,UAAW,GAC5BiE,QAAS,kBAlDL,WACpB,IAAMC,EAAYjC,OAAO5B,GAAiB,EAE1C,GAAkB,IAAd6D,EAAiB,CACjB,IAAMC,EAAWlC,OAAO9D,GAAgB,EACxCmC,EAAiB,MACjBlC,EAAgB2C,OAAOoD,GAC1B,MACG7D,EAAiBS,OAAOmD,GAE/B,CAwCkCE,EAAN,IAEb,cAAC,EAAD,CACIjG,aAAcA,EACdC,gBAAiBA,EACjBC,KAAM,KACNC,GAAI,OAER,cAAC,EAAD,CACI+B,cAAeA,EACfC,iBAAkBA,IAEtB,cAAC,IAAD,CACI0D,MAAM,UACNnF,GAAI,CAAEkB,MAAO,GAAIC,UAAW,GAC5BiE,QAAS,kBAlDL,WACpB,IAAMI,EAAYpC,OAAO5B,GAAiB,EAE1C,GAAkB,KAAdgE,EAAkB,CAClB,IAAMC,EAAWrC,OAAO9D,GAAgB,EACxCmC,EAAiB,KACjBlC,EAAgB2C,OAAOuD,GAC1B,MACGhE,EAAiBS,OAAOsD,GAE/B,CAwCkCE,EAAN,OAGjB,sBAAK1E,UAAU,iBAAf,UACI,oBAAIA,UAAU,WAAd,8BACA,qBAAIA,UAAU,uBAAd,UACKoC,OAAOxC,GACJwC,OAAOtC,GAAqB,IAFpC,UAMJ,cAAC,EAAD,CACIF,mBAAoBA,EACpBE,mBAAoBA,EACpBD,sBAAuBA,EACvBE,sBAAuBA,IAE3B,cAAC,EAAD,CAAUY,gBAAiBA,QAI1C,EAEDgE,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,Q","file":"static/js/main.7a82314a.chunk.js","sourcesContent":["import FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\ntype Props = {\n    selectedYear: string;\n    setSelectedYear: React.Dispatch<React.SetStateAction<string>>;\n    from: number;\n    to: number;\n};\n\nexport const Years: React.FC<Props> = ({\n    selectedYear,\n    setSelectedYear,\n    from,\n    to,\n}) => {\n    const items = [];\n    for (let year = from; year < to; year++) {\n        items.push(\n            <MenuItem value={year} key={year}>\n                {year}\n            </MenuItem>\n        );\n    }\n    return (\n        <>\n            <FormControl sx={{ minWidth: 150 }} size='small'>\n                <InputLabel id='demo-select-small'>Year</InputLabel>\n                <Select\n                    labelId='demo-select-small'\n                    id='demo-select-small'\n                    value={selectedYear}\n                    label='Year'\n                    onChange={(e) => {\n                        setSelectedYear(e.target.value);\n                    }}\n                >\n                    {items}\n                </Select>\n            </FormControl>\n        </>\n    );\n};\n","import { TextField } from '@mui/material';\n\ntype Props = {\n    businessDaysLength: string;\n    workingHoursPerDay: string;\n    setBusinessDaysLength: (value: React.SetStateAction<string>) => void;\n    setworkingHoursPerDay: (value: React.SetStateAction<string>) => void;\n};\n\nexport const Settings: React.FC<Props> = ({\n    businessDaysLength,\n    setBusinessDaysLength,\n    workingHoursPerDay,\n    setworkingHoursPerDay,\n}) => {\n    return (\n        <div className='container h-80'>\n            <h5 className='item-130 lnh-80'>Settings : </h5>\n            <h5 className='item-270 lnh-80 text-center'>\n                <TextField\n                    sx={{ width: 100, marginTop: 3 }}\n                    id='setting-days'\n                    label='days'\n                    type='number'\n                    size='small'\n                    value={businessDaysLength}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    onChange={(e) => {\n                        setBusinessDaysLength(e.target.value);\n                    }}\n                />{' '}\n                ×{' '}\n                <TextField\n                    sx={{ width: 100, marginTop: 3 }}\n                    id='setting-hours'\n                    label='hours'\n                    type='number'\n                    size='small'\n                    value={workingHoursPerDay}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    onChange={(e) => {\n                        setworkingHoursPerDay(e.target.value);\n                    }}\n                />\n            </h5>\n        </div>\n    );\n};\n","import FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\ntype Props = {\n    selectedMonth: string;\n    setSelectedMonth: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const Months: React.FC<Props> = ({\n    selectedMonth,\n    setSelectedMonth,\n}) => {\n    return (\n        <>\n            <FormControl sx={{ minWidth: 150 }} size='small'>\n                <InputLabel id='demo-select-small'>Month</InputLabel>\n                <Select\n                    labelId='demo-select-small'\n                    id='demo-select-small'\n                    value={selectedMonth}\n                    label='Month'\n                    onChange={(e) => {\n                        setSelectedMonth(e.target.value);\n                    }}\n                >\n                    <MenuItem value='1'>1</MenuItem>\n                    <MenuItem value='2'>2</MenuItem>\n                    <MenuItem value='3'>3</MenuItem>\n                    <MenuItem value='4'>4</MenuItem>\n                    <MenuItem value='5'>5</MenuItem>\n                    <MenuItem value='6'>6</MenuItem>\n                    <MenuItem value='7'>7</MenuItem>\n                    <MenuItem value='8'>8</MenuItem>\n                    <MenuItem value='9'>9</MenuItem>\n                    <MenuItem value='10'>10</MenuItem>\n                    <MenuItem value='11'>11</MenuItem>\n                    <MenuItem value='12'>12</MenuItem>\n                </Select>\n            </FormControl>\n        </>\n    );\n};\n","type Props = {\n    holidaysOfMonth: string[];\n};\n\nexport const Holidays: React.FC<Props> = ({ holidaysOfMonth }) => {\n    return (\n        <>\n            {holidaysOfMonth.length ? (\n                holidaysOfMonth.map((holiday, key) => {\n                    return (\n                        <div className='container h-30' key={key}>\n                            <h5 className='item-95'>\n                                {key === 0 && 'Holidays : '}{' '}\n                            </h5>\n                            <h5 className='item-305 text-center'>{holiday}</h5>\n                        </div>\n                    );\n                })\n            ) : (\n                <div className='container h-30'>\n                    <h5 className='item-130'>Holidays : </h5>\n                    <h5 className='item-270 text-center'>No holiday...</h5>\n                </div>\n            )}\n        </>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as holiday_jp from '@holiday-jp/holiday_jp';\nimport Box from '@mui/material/Box';\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport { Years } from './components/Years';\nimport { Settings } from './components/Settings';\nimport './style.css';\nimport { Months } from './components/Months';\nimport { HolidayObj, FormatedHolidayObj } from './types';\nimport { Holidays } from './components/Holidays';\n\nconst App: React.VFC = () => {\n    const currentYear = String(new Date().getFullYear()); // 現在の年\n    const currentMonth = String(new Date().getMonth() + 1); // 現在の月\n    const startDate = new Date('2024-01-01'); // 検索可能初日\n    const endDate = new Date('2029-12-31'); // 検索可能最終日\n    const holidayObjects = holiday_jp.between(startDate, endDate); // 対象期間の休日オブジェクト\n    const [numbersOfDays, setNumbersOfDays] = useState<number[]>([]); // 対象年の各月の日数\n    const [allHolidays, setAllHolidays] = useState<FormatedHolidayObj[]>([]); // 対象年の祝日のリスト\n    const [holidaysOfMonth, setHolidaysOfMonth] = useState<string[]>([]); // 対象月の祝日のリスト\n    const [businessDaysLength, setBusinessDaysLength] = useState<string>(''); // 対象月の営業日数\n    const [selectedYear, setSelectedYear] = useState<string>(currentYear); // 選択された年\n    const [selectedMonth, setSelectedMonth] = useState<string>(currentMonth); // 選択された月\n    const [workingHoursPerDay, setworkingHoursPerDay] = useState<string>('8'); // 1日の稼働時間\n\n    /**\n     * 「年/月/日(曜日)」にフォーマット\n     * @param {Date} date\n     * @returns {string} formatedDate フォーマットされた日付\n     */\n    const formatDate = (date: Date) => {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const dayOfWeek = date.getDay();\n        const dayOfWeekStr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][\n            dayOfWeek\n        ];\n        const formatedDate = `${year}/${month}/${day}(${dayOfWeekStr})`;\n        return formatedDate;\n    };\n\n    /**\n     * 対象日が休日かどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isHoliday 休日かどうかの真偽値\n     */\n    const checkIsHoliday = (date: string): boolean => {\n        let isHoliday = false;\n        allHolidays.forEach((holiday) => {\n            if (holiday.date === date) isHoliday = true;\n        });\n        return isHoliday;\n    };\n\n    /**\n     * 対象日が土日のどちらかかどうか判定\n     * @param {string} date - 対象日\n     * @returns {boolean} isWeekend 土日のどちらかどうかの真偽値\n     */\n    const checkIsWeekend = (date: string): boolean => {\n        let isWeekend = false;\n        if (date.match(/Sat/) || date.match(/Sun/)) isWeekend = true;\n        return isWeekend;\n    };\n\n    /**\n     * 「年/月/日/(曜日)：休日名」にフォーマットしてallHolidays:[]にセット\n     * @param holidayObjects\n     */\n    const makeHolidaysArr = (holidayObjects: HolidayObj[]) => {\n        holidayObjects.forEach((holiday) => {\n            const year = holiday.date.getFullYear();\n            const month = holiday.date.getMonth() + 1;\n            const day = holiday.date.getDate();\n            const week = holiday.week_en.slice(0, 3);\n            const name = holiday.name_en;\n            const formatedHolidayDate = `${year}/${month}/${day}(${week})`;\n            const formatedHolidayObj: FormatedHolidayObj = {\n                date: formatedHolidayDate,\n                name: name,\n            };\n            setAllHolidays((allHolidays) => [\n                ...allHolidays,\n                formatedHolidayObj,\n            ]);\n        });\n    };\n\n    /**\n     * 対象月の営業日を取得\n     * @param {string} ym\n     */\n    const getBusinessdays = (ym: string) => {\n        const targetYear = Number(ym.slice(0, 4));\n        let targetMonthStr = ym.slice(4, 6);\n        // 月の十の位に\"0\"があれば削除\n        if (targetMonthStr.slice(0, 1) === '0')\n            targetMonthStr = targetMonthStr.replace('0', '');\n        const targetMonth = Number(targetMonthStr);\n        const newBusinessdaysArr: string[] = [];\n        const newHolidaysArr: string[] = [];\n        for (let i = 1; i <= numbersOfDays[targetMonth - 1]; i++) {\n            const date: Date = new Date(targetYear, targetMonth - 1, i);\n            let formatedDate = formatDate(date);\n            const isWeekend = checkIsWeekend(formatedDate);\n            const isHoliday = checkIsHoliday(formatedDate);\n            // 休日はnewHolidaysArr:[]に追加し、ループ終了後setState()\n            if (isHoliday) {\n                allHolidays.forEach((holiday) => {\n                    if (holiday.date === formatedDate) {\n                        formatedDate = formatedDate.slice(5);\n                        newHolidaysArr.push(`${formatedDate}：${holiday.name}`);\n                    }\n                });\n            }\n            // 平日はnewBusinessdaysArr:[]に追加し、ループ終了後setState()\n            if (!isWeekend && !isHoliday) newBusinessdaysArr.push(formatedDate);\n        }\n        setHolidaysOfMonth(newHolidaysArr);\n        setBusinessDaysLength(String(newBusinessdaysArr.length));\n    };\n\n    /**\n     * 前月を表示\n     */\n    const moveToPrevMonth = () => {\n        const prevMonth = Number(selectedMonth) - 1;\n        // 年を跨ぐ場合\n        if (prevMonth === 0) {\n            const prevYear = Number(selectedYear) - 1;\n            setSelectedMonth('12');\n            setSelectedYear(String(prevYear));\n        } else {\n            setSelectedMonth(String(prevMonth));\n        }\n    };\n\n    /**\n     * 次月を表示\n     */\n    const moveToNextMonth = () => {\n        const nextMonth = Number(selectedMonth) + 1;\n        // 年を跨ぐ場合\n        if (nextMonth === 13) {\n            const nextYear = Number(selectedYear) + 1;\n            setSelectedMonth('1');\n            setSelectedYear(String(nextYear));\n        } else {\n            setSelectedMonth(String(nextMonth));\n        }\n    };\n\n    useEffect(() => {\n        for (let i = 1; i < 13; i++) {\n            const lastDate = new Date(Number(selectedYear), i, 0).getDate();\n            setNumbersOfDays((numbersOfDays) => [...numbersOfDays, lastDate]);\n        }\n        makeHolidaysArr(holidayObjects);\n    }, []);\n\n    /**\n     * 各月の日数が取得できたら実行\n     */\n    useEffect(() => {\n        getBusinessdays(`${selectedYear}${selectedMonth}`);\n    }, [numbersOfDays, selectedYear, selectedMonth]);\n\n    return (\n        <>\n            <div className='wrapper'>\n                <h5 className='item-270 lnh-80 text-center'>Business day</h5>\n                <Box sx={{ minWidth: 300 }}>\n                    <ArrowBackIosNewIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToPrevMonth()}\n                    />\n                    <Years\n                        selectedYear={selectedYear}\n                        setSelectedYear={setSelectedYear}\n                        from={2024}\n                        to={2030}\n                    />\n                    <Months\n                        selectedMonth={selectedMonth}\n                        setSelectedMonth={setSelectedMonth}\n                    />\n                    <ArrowForwardIosIcon\n                        color='primary'\n                        sx={{ width: 30, marginTop: 1 }}\n                        onClick={() => moveToNextMonth()}\n                    />\n                </Box>\n                <div className='container h-80'>\n                    <h5 className='item-130'>Working hours : </h5>\n                    <h5 className='item-270 text-center'>\n                        {Number(businessDaysLength) *\n                            Number(workingHoursPerDay)}{' '}\n                        h\n                    </h5>\n                </div>\n                <Settings\n                    businessDaysLength={businessDaysLength}\n                    workingHoursPerDay={workingHoursPerDay}\n                    setBusinessDaysLength={setBusinessDaysLength}\n                    setworkingHoursPerDay={setworkingHoursPerDay}\n                />\n                <Holidays holidaysOfMonth={holidaysOfMonth} />\n            </div>\n        </>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}